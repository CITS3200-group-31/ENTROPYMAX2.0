import pandas as pd
from io import StringIO

def validate_csv_structure(filepath):

    #Defines expected columns
    expected_columns = [
        "Group", "Sample", "0.02", "0.023520823", "0.027661457", "0.032531013", "0.038257812",
        "0.044992763", "0.052913343", "0.062228271", "0.07318301", "0.086066235", "0.101217438",
        "0.119035877", "0.139991095", "0.164635295", "0.193617889", "0.227702614", "0.267787655",
        "0.314929314", "0.370369847", "0.435570198", "0.512248497", "0.602425336", "0.708477013",
        "0.833198154", "0.979875354", "1.152373784", "1.355239044", "1.593816947", "1.87439439",
        "2.204365021", "2.592424078", "3.048797515", "3.585511478", "4.216709209", "4.959023745",
        "5.83201622", "6.858691334", "8.066103565", "9.486070089", "11.15600922", "13.11992643",
        "15.42957398", "18.14581465", "21.34022558", "25.09698443", "29.51508761", "34.71095895",
        "40.8215177", "48.00778653", "56.45913473", "66.39826837", "78.087099", "91.83364535",
        "108.0001502", "127.0126259", "149.3720805", "175.6677203", "206.5924761", "242.9612628",
        "285.7324542", "336.0331374", "395.1888131", "464.7583247", "546.5749364", "642.7946423",
        "755.9529803", "889.0318477", "1045.538078", "1229.595853", "1446.055378", "1700.620697",
        "2000"
    ]

    try:
        #Opens and reads all lines into a list
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        #Identifies the headers to mark the start of each block
        header_indices = [idx for idx, line in enumerate(lines) if line.strip().startswith("Group,Sample")]

        if not header_indices:
            raise ValueError("No header lines starting with 'Group,Sample' found in the file.")

        #Adds the last line number to help slice the last block correctly
        header_indices.append(len(lines))

        #Processes each block, extracting the lines and joining them as a string
        for i in range(len(header_indices) - 1):
            block_start = header_indices[i]
            block_end = header_indices[i + 1]
            block_lines = lines[block_start:block_end]

            block_str = "".join(block_lines)
            #Reads the strings as a mini-CSV
            block_df = pd.read_csv(StringIO(block_str))
            block_df.columns = [str(col).strip() for col in block_df.columns]

            #Checks for missing columns
            missing_cols = [col for col in expected_columns if col not in block_df.columns]
            if missing_cols:
                raise ValueError(f"Missing columns {missing_cols} in block starting at line {block_start + 1}")

            #Filters out non-data rows such as stats
            block_df['Group_numeric'] = pd.to_numeric(block_df['Group'], errors='coerce')
            valid_rows_df = block_df.dropna(subset=['Group_numeric'])
            valid_rows_df = valid_rows_df[valid_rows_df['Group_numeric'].apply(lambda x: float(x).is_integer())]

            if valid_rows_df.empty:
                raise ValueError(f"No valid integer-like 'Group' values found in block starting at line {block_start + 1}")

            #Defines the columns that should contain numeric data
            numeric_cols = [col for col in valid_rows_df.columns if col not in ['Group', 'Sample', 'Group_numeric'] and col != '']

            #Groups data to be done by group
            grouped = valid_rows_df.groupby('Group_numeric')

            #Validates each group and column value, checks if int or float otherwise raises an error
            for group_value, group_df in grouped:
                for col in numeric_cols:
                    for idx, val in group_df[col].items():
                        if pd.isna(val):
                            raise ValueError(f"NaN detected in block starting at line {block_start + 1}, "
                                            f"group {group_value}, column '{col}', row index {idx}")
                        if not isinstance(val, (float, int)):
                            raise ValueError(f"Invalid value '{val}' in block starting at line {block_start + 1}, "
                                            f"group {group_value}, column '{col}', row index {idx}")

        return True

    except Exception as e:
        raise ValueError(f"CSV block validation failed: {e}")
